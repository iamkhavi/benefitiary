// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// BetterAuth User model

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  emailVerified       Boolean  @default(false)
  name                String?
  image               String?
  role                UserRole @default(SEEKER)
  onboardingCompleted Boolean  @default(false)
  onboardingStep      Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  organization Organization?
  preferences  UserPreferences?
  accounts     Account[]
  sessions     Session[]
  grantMatches GrantMatch[]
  submissions  Submission[]
  payments     Payment[]
  aiUsage      AIUsage[]

  lastLoginAt   DateTime?
  loginAttempts Int?      @default(0)
  lockedUntil   DateTime?

  @@map("user")
}

// BetterAuth Account model

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

// BetterAuth Session model

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

// BetterAuth Verification model

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

// Organization model

model Organization {
  id        String           @id @default(cuid())
  userId    String           @unique
  name      String
  orgType   OrganizationType
  size      OrganizationSize
  country   String
  region    String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("organizations")
}

// User preferences model

model UserPreferences {
  id         String          @id @default(cuid())
  userId     String          @unique
  categories GrantCategory[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Enums

enum UserRole {
  SEEKER
  WRITER
  FUNDER
}

enum OrganizationType {
  SME
  NONPROFIT
  ACADEMIC
  HEALTHCARE
  OTHER
}

enum OrganizationSize {
  SOLO
  MICRO
  SMALL
  MEDIUM
  LARGE
}

enum GrantCategory {
  HEALTHCARE_PUBLIC_HEALTH
  EDUCATION_TRAINING
  AGRICULTURE_FOOD_SECURITY
  CLIMATE_ENVIRONMENT
  TECHNOLOGY_INNOVATION
  WOMEN_YOUTH_EMPOWERMENT
  ARTS_CULTURE
  COMMUNITY_DEVELOPMENT
  HUMAN_RIGHTS_GOVERNANCE
  SME_BUSINESS_GROWTH
}

// Business Logic Tables

// Funders model
model Funder {
  id           String      @id @default(cuid())
  name         String
  type         FunderType
  website      String?
  contactEmail String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  grants Grant[]

  @@map("funders")
}

// Grants model
model Grant {
  id                  String        @id @default(cuid())
  funderId            String?
  title               String
  description         String?
  eligibilityCriteria String?
  deadline            DateTime?
  fundingAmountMin    Decimal?
  fundingAmountMax    Decimal?
  source              String?
  category            GrantCategory
  scrapedFrom         String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  funder      Funder?      @relation(fields: [funderId], references: [id], onDelete: SetNull)
  matches     GrantMatch[]
  submissions Submission[]

  @@map("grants")
}

// Grant matches (recommendations)
model GrantMatch {
  id         String           @id @default(cuid())
  userId     String
  grantId    String
  matchScore Int?             @default(0)
  status     GrantMatchStatus @default(SAVED)
  createdAt  DateTime         @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  grant Grant @relation(fields: [grantId], references: [id], onDelete: Cascade)

  @@map("grant_matches")
}

// Submissions (tracking proposals)
model Submission {
  id           String           @id @default(cuid())
  userId       String
  grantId      String
  proposalText String?
  status       SubmissionStatus @default(DRAFT)
  submittedAt  DateTime?
  resultDate   DateTime?
  createdAt    DateTime         @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  grant Grant @relation(fields: [grantId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

// Scraped sources
model ScrapedSource {
  id             String              @id @default(cuid())
  url            String
  type           ScrapedSourceType
  lastScrapedAt  DateTime?
  frequency      ScrapingFrequency   @default(WEEKLY)
  status         ScrapedSourceStatus @default(ACTIVE)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@map("scraped_sources")
}

// Payments (DodoPayments synced)
model Payment {
  id               String            @id @default(cuid())
  userId           String
  amount           Decimal
  currency         String            @default("USD")
  provider         PaymentProvider
  subscriptionPlan SubscriptionPlan
  status           PaymentStatus     @default(PAID)
  lastPaymentDate  DateTime?
  createdAt        DateTime          @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// AI usage tracking
model AIUsage {
  id         String     @id @default(cuid())
  userId     String
  taskType   AITaskType
  tokensUsed Int
  costUsd    Decimal
  createdAt  DateTime   @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_usage")
}

// Additional Enums
enum FunderType {
  PRIVATE_FOUNDATION
  GOVERNMENT
  NGO
  CORPORATE
}

enum GrantMatchStatus {
  SAVED
  APPLIED
  REJECTED
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  WON
  LOST
}

enum ScrapedSourceType {
  GOV
  FOUNDATION
  BUSINESS
  NGO
  OTHER
}

enum ScrapingFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum ScrapedSourceStatus {
  ACTIVE
  INACTIVE
}

enum PaymentProvider {
  POLAR
  DODOPAYMENTS
}

enum SubscriptionPlan {
  BASIC
  PRO
  ENTERPRISE
}

enum PaymentStatus {
  PAID
  FAILED
  REFUNDED
}

enum AITaskType {
  PROPOSAL_GENERATION
  EDITING
  SUMMARIZATION
}
