/**
 * Proposal Content Generation
 */

import { BaseChatModel } from '@langchain/core/language_models/chat_models';
import { HumanMessage, SystemMessage } from '@langchain/core/messages';
import { MayaResponse, UserContext, GrantContext } from './types';

export class ProposalGenerator {
  private llm: BaseChatModel;

  constructor(llm: BaseChatModel) {
    this.llm = llm;
  }

  /**
   * Generate complete proposal with cover page and sections
   */
  async generateCompleteProposal(
    userContext: UserContext,
    grantContext: GrantContext,
    sections: string[] = ['executive', 'project', 'budget', 'impact', 'timeline', 'team']
  ): Promise<MayaResponse> {
    
    try {
      const org = userContext?.organization;
      const grant = grantContext;

      // Generate cover page
      const coverPage = this.generateCoverPage(userContext, grantContext);
      
      // Generate table of contents
      const tableOfContents = this.generateTableOfContents(sections);
      
      // Generate all content sections with actual content
      const contentSections = [];
      for (const section of sections) {
        const sectionContent = await this.generateSectionContent(section, userContext, grantContext);
        // Only add sections that have actual content
        if (sectionContent && sectionContent.trim().length > 50) {
          contentSections.push({
            section,
            content: sectionContent,
            title: this.getSectionTitle(section)
          });
        }
      }

      // Generate professional proposal using ChatGPT guide format
      const completeProposal = `<article class='proposal'>
  <header>
    <h1>${org?.name || 'Tech Care for All'}</h1>
    <p><strong>Principal Investigator:</strong> [Principal Investigator Name]</p>
    <p><strong>Grant:</strong> ${grant?.title || 'Grant Opportunity'}</p>
  </header>

  ${contentSections.map((section, index) => `
  <section>
    <h2>${index + 1}. ${section.title}</h2>
    ${section.content}
  </section>`).join('')}

  <footer>
    <p><em>Generated by Benefitiary AI — Maya Assistant</em></p>
  </footer>
</article>`;

      return {
        content: `Your proposal now includes all core sections and a formatted budget table.\n\nYou can review it below or **export as PDF**.\nWould you like me to create a cover letter for submission?`,
        confidence: 0.95,
        reasoning: 'Generated complete proposal with professional formatting',
        suggestions: [
          'Review and customize content',
          'Add organization logo to cover page',
          'Export as PDF for submission'
        ],
        contentType: 'proposal_section',
        extractedContent: {
          section: 'complete_proposal',
          title: 'Complete Grant Proposal',
          content: completeProposal
        }
      };

    } catch (error) {
      console.error('Complete proposal generation error:', error);
      throw new Error('Failed to generate complete proposal');
    }
  }

  /**
   * Generate individual proposal section
   */
  async generateSection(
    section: string,
    userContext: UserContext,
    grantContext: GrantContext,
    userMessage?: string
  ): Promise<MayaResponse> {
    
    try {
      const content = await this.generateSectionContent(section, userContext, grantContext);
      
      // Generate section using ChatGPT guide format
      const wrappedContent = `<section>
  <h2>${this.getSectionTitle(section)}</h2>
  ${content}
</section>`;

      return {
        content: `I've drafted your **${this.getSectionTitle(section)}** section, summarizing project purpose and expected outcomes.\n\n**Next suggestions:**\n• Add data on target beneficiaries\n• Proceed with the next section\n• Review and customize content`,
        confidence: 0.9,
        reasoning: `Generated ${section} section with ${content.split(' ').length} words`,
        suggestions: [
          'Review and customize content',
          'Add specific organizational details',
          'Work on next section'
        ],
        contentType: 'proposal_section',
        extractedContent: {
          section: section,
          title: this.getSectionTitle(section),
          content: wrappedContent
        }
      };

    } catch (error) {
      console.error('Section generation error:', error);
      throw new Error(`Failed to generate ${section} section`);
    }
  }

  /**
   * Generate content for specific section
   */
  private async generateSectionContent(
    section: string,
    userContext: UserContext,
    grantContext: GrantContext
  ): Promise<string> {
    
    const org = userContext?.organization;
    const grant = grantContext;

    const sectionPrompts = {
      'executive': 'Generate a compelling executive summary that clearly articulates the problem statement, proposed solution, methodology, expected outcomes, and significance. Include specific metrics, target populations, and measurable impact indicators. This should be comprehensive enough to stand alone as a complete project overview.',
      'project': 'Create a detailed project description including: problem background with supporting literature, innovative methodology, implementation approach, risk mitigation strategies, quality assurance measures, and expected deliverables. Include specific timelines, participant criteria, data collection methods, and analysis plans.',
      'budget': 'Develop a comprehensive budget breakdown with detailed justifications. Create a professional budget table showing: Personnel costs (with FTE calculations), Equipment and supplies, Travel and training, Indirect costs, and Total project cost. Include cost-effectiveness analysis and budget narrative explaining each major category.',
      'impact': 'Describe expected outcomes with specific, measurable indicators. Include: Primary and secondary endpoints, Evaluation methodology, Data analysis plan, Dissemination strategy, Long-term sustainability, and Broader impact on the field. Provide concrete metrics and success criteria.',
      'timeline': 'Create a detailed project timeline with specific milestones, deliverables, and critical path analysis. Include: Project phases with start/end dates, Key deliverables and deadlines, Risk mitigation timelines, Reporting schedules, and Contingency planning. Format as a comprehensive timeline narrative.',
      'team': 'Highlight team expertise and organizational capacity including: Principal investigator qualifications, Co-investigator expertise, Institutional resources and infrastructure, Previous relevant experience, Publications and track record, and Collaborative partnerships. Demonstrate why this team is uniquely qualified for this project.'
    };

    const prompt = sectionPrompts[section as keyof typeof sectionPrompts] || 
                  `Generate content for the ${section} section`;

    const systemPrompt = `You are Maya, an experienced grant consultant with 15+ years of expertise. Generate professional, publication-ready ${section} section content.

Organization: ${org?.name || 'Organization'} (${org?.orgType?.replace(/_/g, ' ') || 'Not specified'})
Grant: ${grant?.title || 'Grant Opportunity'} from ${grant?.funder?.name || 'Funder'}
Funding: $${grant?.fundingAmountMax?.toLocaleString() || '[Amount]'}

PROFESSIONAL STANDARDS:
- Generate comprehensive, detailed content (1000-1500 words minimum)
- Use semantic HTML: <h3>, <h4>, <p>, <strong>, <ul>, <li>, <table>, <thead>, <tbody>, <tr>, <th>, <td>
- Write in formal, academic language suitable for peer review
- Include specific metrics, timelines, and evidence-based claims
- Create well-structured paragraphs (200-300 words each)
- Use professional terminology and grant writing best practices

CONTENT REQUIREMENTS:
- DO NOT include section heading (it will be added automatically)
- Start directly with substantive content
- Include 5-7 detailed subsections with <h4> headings
- Write comprehensive paragraphs with proper academic flow
- For budget sections: Create detailed tables with proper headers and totals
- Include specific examples, case studies, and supporting evidence
- End with strong summary that reinforces key points

FORMATTING STANDARDS:
- Use <h4> for subsection headings
- Use <p> for all paragraphs with proper spacing
- Use <strong> for emphasis on key terms
- Use <ul><li> for bulleted lists
- For tables: Use <table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table>
- Include specific dollar amounts, percentages, and timelines

${prompt}

Generate professional, comprehensive content that demonstrates deep expertise and would impress grant reviewers.`;

    try {
      const response = await this.llm.invoke([
        new SystemMessage(systemPrompt),
        new HumanMessage(`Generate the ${section} section content now.`)
      ]);

      return response.content as string;

    } catch (error) {
      console.error(`Error generating ${section} content:`, error);
      return `<h3>${this.getSectionTitle(section)}</h3><p>Content generation failed. Please try again.</p>`;
    }
  }

  /**
   * Generate simple cover page for TipTap editor
   */
  private generateCoverPage(userContext: UserContext, grantContext: GrantContext): string {
    const org = userContext?.organization;
    const grant = grantContext;
    const currentDate = new Date().toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });

    return `
      <h1>Grant Proposal</h1>
      <h2>${grant?.title || 'Grant Opportunity Title'}</h2>
      
      <p><strong>Submitted to:</strong> ${grant?.funder?.name || 'Funding Organization'}</p>
      <p><strong>Submitted by:</strong> ${org?.name || 'Organization Name'}</p>
      <p><strong>Organization Type:</strong> ${org?.orgType?.replace(/_/g, ' ') || 'Organization Type'}</p>
      <p><strong>Location:</strong> ${org?.country || 'Location'}</p>
      <p><strong>Submission Date:</strong> ${currentDate}</p>
      <p><strong>Requested Amount:</strong> $${grant?.fundingAmountMax?.toLocaleString() || '[Amount]'}</p>
      
      <h4>Primary Contact Information</h4>
      <p><strong>Principal Investigator:</strong> [Principal Investigator Name]</p>
      <p><strong>Title:</strong> [Title/Position]</p>
      <p><strong>Email:</strong> [contact@organization.com]</p>
      <p><strong>Phone:</strong> [Phone Number]</p>
    `;
  }

  /**
   * Generate simple table of contents
   */
  private generateTableOfContents(sections: string[]): string {
    const sectionTitles = {
      'executive': 'Executive Summary',
      'project': 'Project Description',
      'budget': 'Budget Overview',
      'impact': 'Expected Impact & Outcomes',
      'timeline': 'Project Timeline',
      'team': 'Team & Organizational Capacity'
    };

    const tocEntries = sections.map((section, index) => {
      const title = sectionTitles[section as keyof typeof sectionTitles] || 
                   section.charAt(0).toUpperCase() + section.slice(1);
      return `<p>${index + 1}. ${title}</p>`;
    });

    return `
      <h2>Table of Contents</h2>
      ${tocEntries.join('\n')}
    `;
  }

  /**
   * Get section title
   */
  private getSectionTitle(section: string): string {
    const titles = {
      'executive': 'Executive Summary',
      'project': 'Project Description',
      'budget': 'Budget Overview',
      'impact': 'Expected Impact & Outcomes',
      'timeline': 'Project Timeline',
      'team': 'Team & Organizational Capacity'
    };
    return titles[section as keyof typeof titles] || section.charAt(0).toUpperCase() + section.slice(1);
  }

  /**
   * Simple CSS for basic formatting (not used in TipTap)
   */
  private getProposalCSS(): string {
    return `
      .proposal-document {
        font-family: 'Times New Roman', serif;
        line-height: 1.6;
        color: #333;
        max-width: 8.5in;
        margin: 0 auto;
      }
      
      .page {
        min-height: auto;
        width: 100%;
        margin: 0 0 2rem 0;
        padding: 2rem;
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      }
      
      .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #e0e0e0;
        font-size: 12px;
        color: #666;
      }
      
      .page-content {
        min-height: 400px;
        padding: 1rem 0;
      }
      
      .cover-page {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        text-align: center;
        min-height: 600px;
      }
      
      .organization-branding {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 3rem;
        gap: 2rem;
      }
      
      .logo-placeholder {
        border: 2px dashed #3498db;
        padding: 2rem;
        width: 120px;
        height: 120px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #3498db;
        font-style: italic;
        font-size: 12px;
        text-align: center;
        border-radius: 8px;
      }
      
      .organization-name {
        font-size: 28px;
        font-weight: bold;
        color: #2c3e50;
        margin: 0 0 8px 0;
      }
      
      .main-title {
        font-size: 42px;
        font-weight: bold;
        color: #2c3e50;
        margin: 2rem 0;
        letter-spacing: 2px;
      }
      
      .title-underline {
        width: 200px;
        height: 4px;
        background: linear-gradient(90deg, #3498db, #2980b9);
        margin: 0 auto 2rem auto;
        border-radius: 2px;
      }
      
      .grant-title {
        font-size: 24px;
        color: #34495e;
        margin: 1rem 0;
        font-weight: 600;
      }
      
      .submission-section {
        margin: 3rem 0;
        padding: 2rem;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #3498db;
      }
      
      .submission-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
      }
      
      .submission-item h3 {
        font-size: 14px;
        color: #7f8c8d;
        margin: 0 0 8px 0;
        text-transform: uppercase;
        letter-spacing: 1px;
      }
      
      .contact-section {
        margin: 3rem 0;
      }
      
      .contact-section h3 {
        font-size: 18px;
        color: #2c3e50;
        margin: 0 0 1.5rem 0;
        text-align: center;
      }
      
      .contact-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
      }
      
      .contact-item {
        padding: 1.5rem;
        background: #ffffff;
        border: 1px solid #ecf0f1;
        border-radius: 6px;
        font-size: 14px;
        line-height: 1.6;
      }
      
      .table-of-contents-content {
        padding: 2rem 0;
      }
      
      .table-of-contents-content h1 {
        font-size: 28px;
        margin-bottom: 3rem;
        text-align: center;
        color: #2c3e50;
      }
      
      .toc-list {
        margin-top: 2rem;
      }
      
      .toc-entry {
        display: flex;
        justify-content: space-between;
        padding: 12px 0;
        border-bottom: 1px dotted #ccc;
        font-size: 16px;
      }
      
      .toc-title {
        font-weight: bold;
      }
      
      /* Content page styling */
      .content-page h3 {
        font-size: 24px;
        margin: 0 0 1.5rem 0;
        color: #2c3e50;
        border-bottom: 3px solid #3498db;
        padding-bottom: 0.5rem;
      }
      
      .content-page h4 {
        font-size: 18px;
        margin: 1.5rem 0 1rem 0;
        color: #34495e;
      }
      
      .content-page p {
        margin-bottom: 1rem;
        text-align: justify;
        line-height: 1.7;
      }
      
      .content-page ul {
        margin: 1rem 0;
        padding-left: 2rem;
      }
      
      .content-page li {
        margin-bottom: 0.5rem;
        line-height: 1.6;
      }
      
      .content-page strong {
        color: #2c3e50;
        font-weight: 600;
      }
      
      /* Budget tables */
      .budget-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1.5rem 0;
      }
      
      .budget-table th,
      .budget-table td {
        border: 1px solid #ddd;
        padding: 12px;
        text-align: left;
      }
      
      .budget-table th {
        background-color: #f8f9fa;
        font-weight: bold;
        color: #2c3e50;
      }
      
      .budget-table .amount {
        text-align: right;
        font-weight: bold;
      }
      
      /* Timeline styling */
      .timeline-item {
        margin: 1rem 0;
        padding: 1rem;
        border-left: 3px solid #3498db;
        background: #f8f9fa;
      }
      
      .timeline-date {
        font-weight: bold;
        color: #3498db;
      }
      
      @media print {
        .page { 
          box-shadow: none; 
          margin: 0; 
          border: none;
          page-break-after: always;
        }
        .page-header {
          display: block;
        }
      }
    `;
  }
}